Parameters:
  EnvironmentName:
    Description: An environment name
    Type: String

  VpcCIDR:
    Description: Please enter the IP
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP
    Type: String
    Default: 10.192.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP
    Type: String
    Default: 10.192.20.0/24

  EC2InstanceType:
    Description: creatiing instance type
    Default: t2.micro
    Type: String
    AllowedValues: [t2.micro, t1.micro, t3.micro, t2.small]

  amiId:
    Description: created ami-id for ec2
    Default: ami-063d43db0594b521b
    Type: String
    AllowedValues:
      [ami-063d43db0594b521b, ami-0866a3c8686eaeeba, ami-037bb856a23a2f822]

  keypair:
    Description: creating key name
    Default: cloudwatch logs
    Type: String
    AllowedValues: [all, cloudwatch logs]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SERVER:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref amiId
      KeyName: !Ref keypair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref MySecurityGroup2
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          #!/bin/bash
          sudo su
          yum update -y
          yum install -y httpd
          service httpd start
          chkconfig httpd on
          echo "<h1>Hello from $(hostname -f)</h1>" >/var/www/html/index.html

  SERVER2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref amiId
      KeyName: !Ref keypair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref MySecurityGroup2
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          #!/bin/bash
          sudo su
          yum update -y
          yum install -y httpd
          service httpd start
          chkconfig httpd on
          echo "<h1>Hello from $(hostname -f)</h1>" >/var/www/html/index.html

  MySecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySecurityGroup1
      GroupDescription: security group for demo
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  MySecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySecurityGroup2
      GroupDescription: security group for demo
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        

  myDemoELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
      SecurityGroups:
        - !Ref MySecurityGroup2
      Instances:
        - !Ref SERVER
        - !Ref SERVER2
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
          InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "2"
        Interval: "10"
        Timeout: "5"
        UnhealthyThreshold: "3"
